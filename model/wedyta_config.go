package model

import (
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

type WedytaConfig struct {
	// Usage of db.Debug()
	DebugSQL bool

	// Path to the folder where json configurations are located.
	// Default: config/wedyta
	ConfigDir string

	// The function must return true if the action on the specified table field is allowed.
	// It should be noted that in some cases the field may be empty when the access check occurs in the context of the entire table, and not a specific field.
	// It is recommended to place the function in such a way that it has access to the existing functions for checking authorization by the cookie of the main application, and this is the reason why the context is also passed to it.
	AccessCheckFunc func(context *gin.Context, modelName, fieldName, action string) bool

	// Gin template in which the content generated by the wedyta module will be placed
	Template string

	// A function that will add a list of variables and their values ​​that should be additionally filled in the template, for example, the username and the like.
	PrepareTemplateVariables func(context *gin.Context, modelName string, h gin.H)

	// HeadersTag default 'h2'
	HeadersTag string

	// PaginationRecordsPerPage default 100
	PaginationRecordsPerPage int

	// BreadcrumbsRootName default 'Home'
	BreadcrumbsRootName string

	// BreadcrumbsRootUrl default '/'
	BreadcrumbsRootUrl string

	// BreadcrumbsDivider default '>'
	BreadcrumbsDivider string

	// example: ./uploads
	FileUploadFolder string

	// example: /uploads
	FileUploadRelativePath string

	// VariableResolver the function to which the variable name will be passed to get the value
	VariableResolver func(context *gin.Context, modelName string, variableName string) string

	BeforeCreate func(context *gin.Context, db *gorm.DB, table string, insertData map[string]interface{}) (bool, string)
	BeforeUpdate func(context *gin.Context, db *gorm.DB, table string, id int64, field string)
	BeforeDelete func(context *gin.Context, db *gorm.DB, table string, id int64)
	AfterCreate  func(context *gin.Context, db *gorm.DB, table string, id int64)
	AfterUpdate  func(context *gin.Context, db *gorm.DB, table string, id int64, field string, valueBeforeUpdate string, valueAfterUpdate string)
	AfterDelete  func(context *gin.Context, db *gorm.DB, table string, id int64)

	// DynamicColumnDataFunc allows dynamic generation of additional table cells
	// by invoking a user-defined function. This enables adding custom columns to
	// each row based on record data, user context, or other dynamic logic.
	DynamicColumnDataFunc func(context *gin.Context, db *gorm.DB, table string, field string, record map[string]interface{}) string

	// JQueryScriptTag default: <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
	JQueryScriptTag string

	// SummernoteInitTags default:
	// <link href="https://cdn.jsdelivr.net/npm/summernote@0.9.1/dist/summernote.min.css" rel="stylesheet">
	// <script src="https://cdn.jsdelivr.net/npm/summernote@0.9.1/dist/summernote.min.js"></script>
	SummernoteInitTags string
}
